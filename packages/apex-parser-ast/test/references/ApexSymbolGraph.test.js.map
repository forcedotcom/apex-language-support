{"version":3,"file":"ApexSymbolGraph.test.js","sourceRoot":"","sources":["ApexSymbolGraph.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2025, salesforce.com, inc.\n * All rights reserved.\n * Licensed under the BSD 3-Clause license.\n * For full license text, see LICENSE.txt file in the\n * repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport {\n  ApexSymbolGraph,\n  ReferenceType,\n} from '../../src/references/ApexSymbolGraph';\nimport {\n  ApexSymbol,\n  SymbolKind,\n  SymbolVisibility,\n} from '../../src/types/symbol';\n\ndescribe('ApexSymbolGraph', () => {\n  let graph: ApexSymbolGraph;\n\n  beforeEach(() => {\n    graph = new ApexSymbolGraph();\n  });\n\n  afterEach(() => {\n    graph.clear();\n  });\n\n  // Helper function to create test symbols\n  const createTestSymbol = (\n    name: string,\n    kind: SymbolKind,\n    fqn?: string,\n    filePath: string = 'TestFile.cls',\n  ): ApexSymbol => ({\n    name,\n    kind,\n    fqn: fqn || `TestNamespace.${name}`,\n    location: {\n      startLine: 1,\n      startColumn: 1,\n      endLine: 10,\n      endColumn: 20,\n    },\n    modifiers: {\n      visibility: SymbolVisibility.Public,\n      isStatic: false,\n      isFinal: false,\n      isAbstract: false,\n      isVirtual: false,\n      isOverride: false,\n      isTransient: false,\n      isTestMethod: false,\n      isWebService: false,\n    },\n    key: {\n      prefix: 'class',\n      name,\n      path: [filePath, name],\n    },\n    parentKey: null,\n  });\n\n  describe('Symbol Management', () => {\n    it('should add symbols to the graph', () => {\n      const classSymbol = createTestSymbol('MyClass', SymbolKind.Class);\n\n      graph.addSymbol(classSymbol, 'MyClass.cls');\n\n      const stats = graph.getStats();\n      expect(stats.totalSymbols).toBe(1);\n      expect(stats.totalFiles).toBe(1);\n    });\n\n    it('should handle multiple symbols with the same name', () => {\n      const class1 = createTestSymbol(\n        'MyClass',\n        SymbolKind.Class,\n        'Namespace1.MyClass',\n        'File1.cls',\n      );\n      const class2 = createTestSymbol(\n        'MyClass',\n        SymbolKind.Class,\n        'Namespace2.MyClass',\n        'File2.cls',\n      );\n\n      graph.addSymbol(class1, 'File1.cls');\n      graph.addSymbol(class2, 'File2.cls');\n\n      const symbols = graph.lookupSymbolByName('MyClass');\n      expect(symbols).toHaveLength(2);\n      expect(symbols.map((s) => s.fqn)).toContain('Namespace1.MyClass');\n      expect(symbols.map((s) => s.fqn)).toContain('Namespace2.MyClass');\n    });\n\n    it('should lookup symbols by FQN', () => {\n      const classSymbol = createTestSymbol(\n        'MyClass',\n        SymbolKind.Class,\n        'MyNamespace.MyClass',\n      );\n\n      graph.addSymbol(classSymbol, 'MyClass.cls');\n\n      const found = graph.lookupSymbolByFQN('MyNamespace.MyClass');\n      expect(found).toBeDefined();\n      expect(found?.name).toBe('MyClass');\n    });\n\n    it('should get symbols in a file', () => {\n      const classSymbol = createTestSymbol('MyClass', SymbolKind.Class);\n      const methodSymbol = createTestSymbol('myMethod', SymbolKind.Method);\n\n      graph.addSymbol(classSymbol, 'MyClass.cls');\n      graph.addSymbol(methodSymbol, 'MyClass.cls');\n\n      const symbols = graph.getSymbolsInFile('MyClass.cls');\n      expect(symbols).toHaveLength(2);\n      expect(symbols.map((s) => s.name)).toContain('MyClass');\n      expect(symbols.map((s) => s.name)).toContain('myMethod');\n    });\n\n    it('should get files containing a symbol', () => {\n      const class1 = createTestSymbol(\n        'MyClass',\n        SymbolKind.Class,\n        'MyClass',\n        'File1.cls',\n      );\n      const class2 = createTestSymbol(\n        'MyClass',\n        SymbolKind.Class,\n        'MyClass',\n        'File2.cls',\n      );\n\n      graph.addSymbol(class1, 'File1.cls');\n      graph.addSymbol(class2, 'File2.cls');\n\n      const files = graph.getFilesForSymbol('MyClass');\n      expect(files).toHaveLength(2);\n      expect(files).toContain('File1.cls');\n      expect(files).toContain('File2.cls');\n    });\n  });\n\n  describe('Reference Tracking', () => {\n    it('should add references between symbols', () => {\n      const classSymbol = createTestSymbol('MyClass', SymbolKind.Class);\n      const methodSymbol = createTestSymbol('myMethod', SymbolKind.Method);\n\n      graph.addSymbol(classSymbol, 'MyClass.cls');\n      graph.addSymbol(methodSymbol, 'MyClass.cls');\n\n      graph.addReference(methodSymbol, classSymbol, ReferenceType.METHOD_CALL, {\n        startLine: 5,\n        startColumn: 10,\n        endLine: 5,\n        endColumn: 20,\n      });\n\n      const references = graph.findReferencesTo(classSymbol);\n      expect(references).toHaveLength(1);\n      expect(references[0].symbol.name).toBe('myMethod');\n      expect(references[0].referenceType).toBe(ReferenceType.METHOD_CALL);\n    });\n\n    it('should find references from a symbol', () => {\n      const classSymbol = createTestSymbol('MyClass', SymbolKind.Class);\n      const methodSymbol = createTestSymbol('myMethod', SymbolKind.Method);\n      const fieldSymbol = createTestSymbol('myField', SymbolKind.Field);\n\n      graph.addSymbol(classSymbol, 'MyClass.cls');\n      graph.addSymbol(methodSymbol, 'MyClass.cls');\n      graph.addSymbol(fieldSymbol, 'MyClass.cls');\n\n      graph.addReference(methodSymbol, classSymbol, ReferenceType.METHOD_CALL, {\n        startLine: 5,\n        startColumn: 10,\n        endLine: 5,\n        endColumn: 20,\n      });\n\n      graph.addReference(\n        methodSymbol,\n        fieldSymbol,\n        ReferenceType.FIELD_ACCESS,\n        { startLine: 6, startColumn: 15, endLine: 6, endColumn: 25 },\n      );\n\n      const references = graph.findReferencesFrom(methodSymbol);\n      expect(references).toHaveLength(2);\n      expect(references.map((r) => r.symbol.name)).toContain('MyClass');\n      expect(references.map((r) => r.symbol.name)).toContain('myField');\n    });\n\n    it('should handle deferred references for lazy loading', () => {\n      const methodSymbol = createTestSymbol('myMethod', SymbolKind.Method);\n\n      // Add method symbol first\n      graph.addSymbol(methodSymbol, 'MyClass.cls');\n\n      // Try to add reference to non-existent symbol (should be deferred)\n      const nonExistentSymbol = createTestSymbol(\n        'NonExistent',\n        SymbolKind.Class,\n      );\n      graph.addReference(\n        methodSymbol,\n        nonExistentSymbol,\n        ReferenceType.METHOD_CALL,\n        { startLine: 5, startColumn: 10, endLine: 5, endColumn: 20 },\n      );\n\n      // Check that reference is deferred\n      const stats = graph.getStats();\n      expect(stats.deferredReferences).toBe(1);\n\n      // Now add the target symbol (should process deferred reference)\n      graph.addSymbol(nonExistentSymbol, 'NonExistent.cls');\n\n      // Check that deferred reference was processed\n      const newStats = graph.getStats();\n      expect(newStats.deferredReferences).toBe(0);\n\n      // Verify reference exists\n      const references = graph.findReferencesTo(nonExistentSymbol);\n      expect(references).toHaveLength(1);\n      expect(references[0].symbol.name).toBe('myMethod');\n    });\n\n    it('should not create duplicate references', () => {\n      const classSymbol = createTestSymbol('MyClass', SymbolKind.Class);\n      const methodSymbol = createTestSymbol('myMethod', SymbolKind.Method);\n\n      graph.addSymbol(classSymbol, 'MyClass.cls');\n      graph.addSymbol(methodSymbol, 'MyClass.cls');\n\n      // Add the same reference twice\n      const location = {\n        startLine: 5,\n        startColumn: 10,\n        endLine: 5,\n        endColumn: 20,\n      };\n      graph.addReference(\n        methodSymbol,\n        classSymbol,\n        ReferenceType.METHOD_CALL,\n        location,\n      );\n      graph.addReference(\n        methodSymbol,\n        classSymbol,\n        ReferenceType.METHOD_CALL,\n        location,\n      );\n\n      const references = graph.findReferencesTo(classSymbol);\n      expect(references).toHaveLength(1); // Should only have one reference\n    });\n  });\n\n  describe('Dependency Analysis', () => {\n    it('should analyze dependencies for a symbol', () => {\n      const classA = createTestSymbol(\n        'ClassA',\n        SymbolKind.Class,\n        'ClassA',\n        'ClassA.cls',\n      );\n      const classB = createTestSymbol(\n        'ClassB',\n        SymbolKind.Class,\n        'ClassB',\n        'ClassB.cls',\n      );\n      const classC = createTestSymbol(\n        'ClassC',\n        SymbolKind.Class,\n        'ClassC',\n        'ClassC.cls',\n      );\n\n      graph.addSymbol(classA, 'ClassA.cls');\n      graph.addSymbol(classB, 'ClassB.cls');\n      graph.addSymbol(classC, 'ClassC.cls');\n\n      // ClassA depends on ClassB and ClassC\n      graph.addReference(classA, classB, ReferenceType.TYPE_REFERENCE, {\n        startLine: 1,\n        startColumn: 1,\n        endLine: 1,\n        endColumn: 10,\n      });\n      graph.addReference(classA, classC, ReferenceType.TYPE_REFERENCE, {\n        startLine: 2,\n        startColumn: 1,\n        endLine: 2,\n        endColumn: 10,\n      });\n\n      // ClassB depends on ClassC\n      graph.addReference(classB, classC, ReferenceType.TYPE_REFERENCE, {\n        startLine: 1,\n        startColumn: 1,\n        endLine: 1,\n        endColumn: 10,\n      });\n\n      const analysis = graph.analyzeDependencies(classA);\n\n      expect(analysis.dependencies).toHaveLength(2);\n      expect(analysis.dependencies.map((d) => d.name)).toContain('ClassB');\n      expect(analysis.dependencies.map((d) => d.name)).toContain('ClassC');\n      expect(analysis.dependents).toHaveLength(0); // Nothing depends on ClassA\n      expect(analysis.impactScore).toBe(0);\n    });\n\n    it('should calculate impact score correctly', () => {\n      const classA = createTestSymbol(\n        'ClassA',\n        SymbolKind.Class,\n        'ClassA',\n        'ClassA.cls',\n      );\n      const classB = createTestSymbol(\n        'ClassB',\n        SymbolKind.Class,\n        'ClassB',\n        'ClassB.cls',\n      );\n      const classC = createTestSymbol(\n        'ClassC',\n        SymbolKind.Class,\n        'ClassC',\n        'ClassC.cls',\n      );\n\n      graph.addSymbol(classA, 'ClassA.cls');\n      graph.addSymbol(classB, 'ClassB.cls');\n      graph.addSymbol(classC, 'ClassC.cls');\n\n      // Both ClassB and ClassC depend on ClassA\n      graph.addReference(classB, classA, ReferenceType.TYPE_REFERENCE, {\n        startLine: 1,\n        startColumn: 1,\n        endLine: 1,\n        endColumn: 10,\n      });\n      graph.addReference(classC, classA, ReferenceType.TYPE_REFERENCE, {\n        startLine: 1,\n        startColumn: 1,\n        endLine: 1,\n        endColumn: 10,\n      });\n\n      const analysis = graph.analyzeDependencies(classA);\n\n      expect(analysis.dependents).toHaveLength(2);\n      expect(analysis.impactScore).toBe(2);\n    });\n\n    it('should detect circular dependencies', () => {\n      const classA = createTestSymbol(\n        'ClassA',\n        SymbolKind.Class,\n        'ClassA',\n        'ClassA.cls',\n      );\n      const classB = createTestSymbol(\n        'ClassB',\n        SymbolKind.Class,\n        'ClassB',\n        'ClassB.cls',\n      );\n\n      graph.addSymbol(classA, 'ClassA.cls');\n      graph.addSymbol(classB, 'ClassB.cls');\n\n      // Create circular dependency: ClassA -> ClassB -> ClassA\n      graph.addReference(classA, classB, ReferenceType.TYPE_REFERENCE, {\n        startLine: 1,\n        startColumn: 1,\n        endLine: 1,\n        endColumn: 10,\n      });\n      graph.addReference(classB, classA, ReferenceType.TYPE_REFERENCE, {\n        startLine: 1,\n        startColumn: 1,\n        endLine: 1,\n        endColumn: 10,\n      });\n\n      const cycles = graph.detectCircularDependencies();\n      expect(cycles.length).toBeGreaterThan(0);\n\n      // Check that the cycle contains both classes\n      const cycle = cycles[0];\n      expect(cycle).toContain('ClassA');\n      expect(cycle).toContain('ClassB');\n    });\n\n    it('should not detect cycles in acyclic graphs', () => {\n      const classA = createTestSymbol(\n        'ClassA',\n        SymbolKind.Class,\n        'ClassA',\n        'ClassA.cls',\n      );\n      const classB = createTestSymbol(\n        'ClassB',\n        SymbolKind.Class,\n        'ClassB',\n        'ClassB.cls',\n      );\n      const classC = createTestSymbol(\n        'ClassC',\n        SymbolKind.Class,\n        'ClassC',\n        'ClassC.cls',\n      );\n\n      graph.addSymbol(classA, 'ClassA.cls');\n      graph.addSymbol(classB, 'ClassB.cls');\n      graph.addSymbol(classC, 'ClassC.cls');\n\n      // Create acyclic dependency: ClassA -> ClassB -> ClassC\n      graph.addReference(classA, classB, ReferenceType.TYPE_REFERENCE, {\n        startLine: 1,\n        startColumn: 1,\n        endLine: 1,\n        endColumn: 10,\n      });\n      graph.addReference(classB, classC, ReferenceType.TYPE_REFERENCE, {\n        startLine: 1,\n        startColumn: 1,\n        endLine: 1,\n        endColumn: 10,\n      });\n\n      const cycles = graph.detectCircularDependencies();\n      expect(cycles).toHaveLength(0);\n    });\n  });\n\n  describe('File Operations', () => {\n    it('should remove all symbols from a file', () => {\n      const classSymbol = createTestSymbol('MyClass', SymbolKind.Class);\n      const methodSymbol = createTestSymbol('myMethod', SymbolKind.Method);\n\n      graph.addSymbol(classSymbol, 'MyClass.cls');\n      graph.addSymbol(methodSymbol, 'MyClass.cls');\n\n      // Add a symbol to another file\n      const otherSymbol = createTestSymbol(\n        'OtherClass',\n        SymbolKind.Class,\n        'OtherClass',\n        'OtherFile.cls',\n      );\n      graph.addSymbol(otherSymbol, 'OtherFile.cls');\n\n      expect(graph.getStats().totalSymbols).toBe(3);\n      expect(graph.getStats().totalFiles).toBe(2);\n\n      // Remove the first file\n      graph.removeFile('MyClass.cls');\n\n      expect(graph.getStats().totalSymbols).toBe(1);\n      expect(graph.getStats().totalFiles).toBe(1);\n\n      // Verify the remaining symbol is from the other file\n      const remainingSymbols = graph.getSymbolsInFile('OtherFile.cls');\n      expect(remainingSymbols).toHaveLength(1);\n      expect(remainingSymbols[0].name).toBe('OtherClass');\n    });\n\n    it('should clear all symbols from the graph', () => {\n      const classSymbol = createTestSymbol('MyClass', SymbolKind.Class);\n      const methodSymbol = createTestSymbol('myMethod', SymbolKind.Method);\n\n      graph.addSymbol(classSymbol, 'MyClass.cls');\n      graph.addSymbol(methodSymbol, 'MyClass.cls');\n\n      expect(graph.getStats().totalSymbols).toBe(2);\n\n      graph.clear();\n\n      expect(graph.getStats().totalSymbols).toBe(0);\n      expect(graph.getStats().totalFiles).toBe(0);\n      expect(graph.getStats().totalReferences).toBe(0);\n    });\n  });\n\n  describe('Statistics', () => {\n    it('should provide accurate statistics', () => {\n      const classSymbol = createTestSymbol('MyClass', SymbolKind.Class);\n      const methodSymbol = createTestSymbol('myMethod', SymbolKind.Method);\n\n      graph.addSymbol(classSymbol, 'MyClass.cls');\n      graph.addSymbol(methodSymbol, 'MyClass.cls');\n\n      graph.addReference(methodSymbol, classSymbol, ReferenceType.METHOD_CALL, {\n        startLine: 5,\n        startColumn: 10,\n        endLine: 5,\n        endColumn: 20,\n      });\n\n      const stats = graph.getStats();\n\n      expect(stats.totalSymbols).toBe(2);\n      expect(stats.totalReferences).toBe(1);\n      expect(stats.totalFiles).toBe(1);\n      expect(stats.circularDependencies).toBe(0);\n      expect(stats.deferredReferences).toBe(0);\n    });\n\n    it('should count deferred references correctly', () => {\n      const methodSymbol = createTestSymbol('myMethod', SymbolKind.Method);\n      graph.addSymbol(methodSymbol, 'MyClass.cls');\n\n      // Add reference to non-existent symbol\n      const nonExistentSymbol = createTestSymbol(\n        'NonExistent',\n        SymbolKind.Class,\n      );\n      graph.addReference(\n        methodSymbol,\n        nonExistentSymbol,\n        ReferenceType.METHOD_CALL,\n        { startLine: 5, startColumn: 10, endLine: 5, endColumn: 20 },\n      );\n\n      const stats = graph.getStats();\n      expect(stats.deferredReferences).toBe(1);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle symbols without FQN', () => {\n      const symbol = createTestSymbol('MyClass', SymbolKind.Class);\n      symbol.fqn = undefined; // Remove FQN\n\n      graph.addSymbol(symbol, 'MyClass.cls');\n\n      // Should still be able to find by name\n      const found = graph.lookupSymbolByName('MyClass');\n      expect(found).toHaveLength(1);\n      expect(found[0].name).toBe('MyClass');\n    });\n\n    it('should handle empty file paths', () => {\n      const symbol = createTestSymbol('MyClass', SymbolKind.Class);\n      symbol.key.path = []; // Empty path\n\n      graph.addSymbol(symbol, 'MyClass.cls');\n\n      // Should still work with fallback to 'unknown'\n      const symbols = graph.getSymbolsInFile('MyClass.cls');\n      expect(symbols).toHaveLength(1);\n    });\n\n    it('should handle duplicate symbol additions', () => {\n      const symbol = createTestSymbol('MyClass', SymbolKind.Class);\n\n      graph.addSymbol(symbol, 'MyClass.cls');\n      graph.addSymbol(symbol, 'MyClass.cls'); // Add same symbol again\n\n      const stats = graph.getStats();\n      expect(stats.totalSymbols).toBe(1); // Should only count once\n    });\n\n    it('should handle references to non-existent symbols gracefully', () => {\n      const symbol = createTestSymbol('MyClass', SymbolKind.Class);\n      graph.addSymbol(symbol, 'MyClass.cls');\n\n      // Try to find references to non-existent symbol\n      const nonExistentSymbol = createTestSymbol(\n        'NonExistent',\n        SymbolKind.Class,\n      );\n      const references = graph.findReferencesTo(nonExistentSymbol);\n\n      expect(references).toHaveLength(0);\n    });\n  });\n\n  describe('Reference Types', () => {\n    it('should handle different reference types', () => {\n      const classSymbol = createTestSymbol('MyClass', SymbolKind.Class);\n      const methodSymbol = createTestSymbol('myMethod', SymbolKind.Method);\n      const fieldSymbol = createTestSymbol('myField', SymbolKind.Field);\n\n      graph.addSymbol(classSymbol, 'MyClass.cls');\n      graph.addSymbol(methodSymbol, 'MyClass.cls');\n      graph.addSymbol(fieldSymbol, 'MyClass.cls');\n\n      // Add different types of references\n      graph.addReference(methodSymbol, classSymbol, ReferenceType.METHOD_CALL, {\n        startLine: 1,\n        startColumn: 1,\n        endLine: 1,\n        endColumn: 10,\n      });\n      graph.addReference(\n        methodSymbol,\n        fieldSymbol,\n        ReferenceType.FIELD_ACCESS,\n        { startLine: 2, startColumn: 1, endLine: 2, endColumn: 10 },\n      );\n      graph.addReference(\n        classSymbol,\n        methodSymbol,\n        ReferenceType.TYPE_REFERENCE,\n        { startLine: 3, startColumn: 1, endLine: 3, endColumn: 10 },\n      );\n\n      const references = graph.findReferencesFrom(methodSymbol);\n      expect(references).toHaveLength(2);\n      expect(references.map((r) => r.referenceType)).toContain(\n        ReferenceType.METHOD_CALL,\n      );\n      expect(references.map((r) => r.referenceType)).toContain(\n        ReferenceType.FIELD_ACCESS,\n      );\n    });\n  });\n});\n"]}