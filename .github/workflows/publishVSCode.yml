name: Publish in Microsoft Marketplace
on:
  workflow_call:
    inputs:
      skip-package:
        description: 'Skip the package job if already built'
        required: false
        default: 'false'
        type: string
      branch:
        description: 'Branch to publish from'
        required: false
        default: 'main'
        type: string
      pre-release:
        description: 'Publish as pre-release version'
        required: false
        default: 'false'
        type: string
      dry-run:
        description: 'Run in dry-run mode (validate without publishing)'
        required: false
        default: 'false'
        type: string
      artifact-name:
        description: 'Name for the VSIX artifacts (base name or pre-calculated: vsix-packages-{run_number}-{mode})'
        required: false
        default: 'vsix-packages'
        type: string
  workflow_dispatch:
    inputs:
      skip-package:
        description: 'Skip the package job if already built'
        required: false
        default: 'false'
        type: string
      branch:
        description: 'Branch to publish from'
        required: true
        default: 'main'
        type: string
      pre-release:
        description: 'Publish as pre-release version'
        required: false
        default: 'false'
        type: string
      dry-run:
        description: 'Run in dry-run mode (validate without publishing)'
        required: false
        default: 'false'
        type: string
      artifact-name:
        description: 'Name for the VSIX artifacts (base name or pre-calculated: vsix-packages-{run_number}-{mode})'
        required: false
        default: 'vsix-packages'
        type: string

jobs:
  package:
    if: inputs.skip-package != 'true'
    uses: ./.github/workflows/package.yml
    with:
      branch: ${{ inputs.branch || github.ref_name }}
      artifact-name: ${{ inputs.artifact-name }}
      dry-run: ${{ inputs.dry-run || 'false' }}

  publish:
    needs: package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == github.ref_name || inputs.branch == github.ref_name
    env:
      VSCE_PERSONAL_ACCESS_TOKEN: ${{ secrets.VSCE_PERSONAL_ACCESS_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.IDEE_GH_TOKEN }}
    steps:
      - name: Flexible branch match (skip job if not matching)
        run: |
          BRANCH="${GITHUB_REF}"
          INPUT_BRANCH="${{ inputs.branch }}"
          EVENT_BRANCH="${{ github.event.inputs.branch }}"
          if [[ "$BRANCH" == *"$INPUT_BRANCH" ]] || [[ "$BRANCH" == *"$EVENT_BRANCH" ]]; then
            echo "Branch matches, continuing."
          else
            echo "Branch does not match, skipping job."
            exit 0
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.IDEE_GH_TOKEN }}
          ref: ${{ github.event.inputs.branch || inputs.branch || github.ref }}

      - name: Calculate artifact name
        id: calc-artifact-name
        uses: ./.github/actions/calculate-artifact-name
        with:
          artifact-name: ${{ inputs.artifact-name }}
          dry-run: ${{ inputs.dry-run }}

      - name: Download VSIX artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.calc-artifact-name.outputs.artifact-name }}
          path: ./vsix-artifacts

      - name: Setup dry-run artifacts
        if: inputs.dry-run == 'true' || github.event.inputs.dry-run == 'true'
        run: |
          mkdir -p ./vsix-artifacts
          cp ./dry-run-artifacts/*.vsix ./vsix-artifacts/ || echo "No VSIX files found"
          echo "‚úÖ Dry-run: Using local VSIX artifacts from ./dry-run-artifacts/"

      - name: Publish to VS Code Marketplace
        run: |
          # Get the package version from package.json
          PACKAGE_VERSION=$(node -p "require('./packages/apex-lsp-vscode-extension/package.json').version")
          echo "Looking for desktop extension version: $PACKAGE_VERSION"

          # Find the VSIX file matching the package version
          VSIX_PATH=$(find ./vsix-artifacts -name "*apex-language-server-extension-${PACKAGE_VERSION}.vsix" | head -1)
          if [ -z "$VSIX_PATH" ]; then
            echo "Desktop extension VSIX file for version $PACKAGE_VERSION not found in artifacts."
            echo "Available VSIX files:"
            find ./vsix-artifacts -name "*.vsix" | sort
            exit 1
          fi
          echo "Found VSIX: $VSIX_PATH"

          # Add pre-release flag if needed
          PRE_RELEASE_FLAG=""
          if [ "${{ inputs.pre-release }}" = "true" ]; then
            PRE_RELEASE_FLAG="--pre-release"
            echo "Would publish as pre-release version"
          fi

          # Check if this is a dry run
          if [ "${{ inputs.dry-run }}" = "true" ]; then
            echo "üîç DRY RUN MODE - Would publish to VS Code Marketplace:"
            echo "  VSIX: $VSIX_PATH"
            echo "  Pre-release: ${{ inputs.pre-release }}"
            echo "  Command: npx vsce publish --pat [PAT] --packagePath \"$VSIX_PATH\" --skip-duplicate $PRE_RELEASE_FLAG"
            echo "‚úÖ Dry run completed - no actual publish performed"
          else
            echo "Publishing VSIX: $VSIX_PATH"
            # Publish using vsce
            npx vsce publish --pat ${{ secrets.VSCE_PERSONAL_ACCESS_TOKEN }} --packagePath "$VSIX_PATH" --skip-duplicate $PRE_RELEASE_FLAG
            echo "‚úÖ Successfully published to VSCode Marketplace"
          fi
        env:
          VSCE_PERSONAL_ACCESS_TOKEN: ${{ secrets.VSCE_PERSONAL_ACCESS_TOKEN }}
