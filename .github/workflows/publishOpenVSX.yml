name: Publish in Open VSX Registry
on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch to publish from'
        required: false
        default: 'main'
        type: string
      pre-release:
        description: 'Publish as pre-release version'
        required: false
        default: 'false'
        type: string
      dry-run:
        description: 'Run in dry-run mode (validate without publishing)'
        required: false
        default: 'false'
        type: string
      artifact-name:
        description: 'Name for the VSIX artifacts (base name or pre-calculated: vsix-packages-{run_number}-{mode})'
        required: false
        default: 'vsix-packages'
        type: string
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to publish from'
        required: true
        default: 'main'
        type: string
      pre-release:
        description: 'Publish as pre-release version'
        required: false
        default: 'false'
        type: string
      dry-run:
        description: 'Run in dry-run mode (validate without publishing)'
        required: false
        default: 'false'
        type: string
      artifact-name:
        description: 'Name for the VSIX artifacts (base name or pre-calculated: vsix-packages-{run_number}-{mode})'
        required: false
        default: 'vsix-packages'
        type: string

jobs:
  download-artifacts:
    runs-on: ubuntu-latest
    outputs:
      vsix_files: ${{ steps.find_vsix.outputs.vsix_files }}
    steps:
      - name: Download VSIX artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ./vsix-artifacts

      - name: Find VSIX files
        id: find_vsix
        run: |
          VSIX_FILES=$(find ./vsix-artifacts -name "*.vsix" | jq -R -s -c 'split("\n")[:-1]')
          echo "vsix_files=$VSIX_FILES" >> $GITHUB_OUTPUT

  publish:
    runs-on: ubuntu-latest
    needs: download-artifacts
    if: github.ref == 'refs/heads/main' || github.event.inputs.branch == github.ref_name || inputs.branch == github.ref_name
    strategy:
      matrix:
        vsix: ${{ fromJson(needs.download-artifacts.outputs.vsix_files) }}
    env:
      OVSX_PAT: ${{ secrets.OVSX_PAT }}
      GITHUB_TOKEN: ${{ secrets.IDEE_GH_TOKEN }}
    steps:
      - name: Flexible branch match (skip job if not matching)
        run: |
          BRANCH="${GITHUB_REF}"
          INPUT_BRANCH="${{ inputs.branch }}"
          EVENT_BRANCH="${{ github.event.inputs.branch }}"
          if [[ "$BRANCH" == *"$INPUT_BRANCH" ]] || [[ "$BRANCH" == *"$EVENT_BRANCH" ]]; then
            echo "Branch matches, continuing."
          else
            echo "Branch does not match, skipping job."
            exit 0
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.IDEE_GH_TOKEN }}
          ref: ${{ github.event.inputs.branch || inputs.branch || github.ref }}

      - name: Publish to Open VSX Registry
        run: |
          echo "Publishing ${{ matrix.vsix }}"
          PRE_RELEASE_FLAG=""
          if [ "${{ inputs.pre-release }}" = "true" ]; then
            PRE_RELEASE_FLAG="--pre-release"
            echo "Would publish as pre-release version"
          fi
          if [ "${{ inputs.dry-run }}" = "true" ]; then
            echo "üîç DRY RUN MODE - Would publish to OpenVSX Registry:"
            echo "  VSIX: ${{ matrix.vsix }}"
            echo "  Pre-release: ${{ inputs.pre-release }}"
            echo "  Command: npx ovsx publish \"${{ matrix.vsix }}\" -p [PAT] $PRE_RELEASE_FLAG"
            echo "‚úÖ Dry run completed - no actual publish performed"
          else
            echo "Publishing VSIX: ${{ matrix.vsix }}"
            npx ovsx publish "${{ matrix.vsix }}" -p ${{ secrets.OVSX_PAT }} $PRE_RELEASE_FLAG
            echo "‚úÖ Successfully published to OpenVSX Registry"
          fi
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}
