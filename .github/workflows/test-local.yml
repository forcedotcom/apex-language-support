name: Test Workflows Locally

on:
  workflow_dispatch:
    inputs:
      test-type:
        description: 'Type of test to run'
        required: true
        type: choice
        options:
          - package-detection
          - change-detection
          - artifact-creation
          - version-bumping
          - npm-publishing
          - extension-publishing
      branch:
        description: 'Branch to test from'
        required: false
        default: 'main'
        type: string

jobs:
  test-package-detection:
    if: inputs.test-type == 'package-detection'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Test Get Packages Action
        uses: ./.github/actions/get-packages

      - name: Display Results
        run: |
          echo "NPM Packages: ${{ steps.get-packages.outputs.npm-packages }}"
          echo "Extensions: ${{ steps.get-packages.outputs.extensions }}"
          echo "Extension Paths: ${{ steps.get-packages.outputs.extension-paths }}"

  test-change-detection:
    if: inputs.test-type == 'change-detection'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch || github.ref }}

      - name: Test Change Detection
        run: |
          echo "Testing change detection logic..."

          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"

          # Test NPM package detection
          NPM_PACKAGES=""
          for pkg in packages/*/; do
            PKG_NAME=$(basename "$pkg")
            if [ -f "$pkg/package.json" ]; then
              if ! grep -q '"publisher"' "$pkg/package.json"; then
                if echo "$CHANGED_FILES" | grep -q "^packages/$PKG_NAME/"; then
                  NPM_PACKAGES="$NPM_PACKAGES,$PKG_NAME"
                fi
              fi
            fi
          done

          # Test extension detection
          EXTENSIONS=""
          for pkg in packages/*/; do
            PKG_NAME=$(basename "$pkg")
            if [ -f "$pkg/package.json" ]; then
              if grep -q '"publisher"' "$pkg/package.json"; then
                if echo "$CHANGED_FILES" | grep -q "^packages/$PKG_NAME/"; then
                  EXTENSIONS="$EXTENSIONS,$PKG_NAME"
                fi
              fi
            fi
          done

          echo "Changed NPM packages: ${NPM_PACKAGES#,}"
          echo "Changed extensions: ${EXTENSIONS#,}"

  test-artifact-creation:
    if: inputs.test-type == 'artifact-creation'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Test Package Creation
        run: |
          echo "Testing package creation..."

          # Test if package script exists
          if npm run | grep -q "package:packages"; then
            echo "✅ package:packages script found"
          else
            echo "❌ package:packages script not found"
            exit 1
          fi

          # Test if packages directory exists
          if [ -d "packages" ]; then
            echo "✅ packages directory found"
            echo "Packages found:"
            ls -la packages/
          else
            echo "❌ packages directory not found"
            exit 1
          fi

      - name: Create Test Artifact
        run: |
          # Create a test VSIX file
          mkdir -p test-artifacts
          echo "test-vsix-content" > test-artifacts/test-extension.vsix

          echo "Created test artifact: test-artifacts/test-extension.vsix"

      - name: Upload Test Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-vsix-packages
          path: test-artifacts/*.vsix
          retention-days: 1

  test-version-bumping:
    if: inputs.test-type == 'version-bumping'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Test Version Bumping Logic
        run: |
          echo "Testing version bumping logic..."

          # Test with sample commit messages
          COMMIT_MESSAGES="feat: new feature
          fix: bug fix
          breaking: API change
          docs: documentation"

          echo "Sample commit messages:"
          echo "$COMMIT_MESSAGES"

          # Determine version bump type
          VERSION_BUMP="patch"  # default

          if echo "$COMMIT_MESSAGES" | grep -qi "breaking\|major"; then
            VERSION_BUMP="major"
          elif echo "$COMMIT_MESSAGES" | grep -qi "feat\|feature\|minor"; then
            VERSION_BUMP="minor"
          fi

          echo "Version bump type: $VERSION_BUMP"

          # Test on a sample package
          if [ -f "packages/apex-lsp-logging/package.json" ]; then
            echo "Testing on apex-lsp-logging package..."
            CURRENT_VERSION=$(node -p "require('./packages/apex-lsp-logging/package.json').version")
            echo "Current version: $CURRENT_VERSION"
            
            # Note: We won't actually bump the version in test mode
            echo "Would bump to: $VERSION_BUMP"
          else
            echo "❌ Test package not found"
          fi

  test-npm-publishing:
    if: inputs.test-type == 'npm-publishing'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Test NPM Publishing Logic
        run: |
          echo "Testing NPM publishing logic..."

          # Test package.json validation
          for pkg in packages/*/; do
            PKG_NAME=$(basename "$pkg")
            if [ -f "$pkg/package.json" ]; then
              if ! grep -q '"publisher"' "$pkg/package.json"; then
                echo "✅ NPM package: $PKG_NAME"
                
                # Test if package can be built
                if [ -f "$pkg/package.json" ]; then
                  echo "  - package.json exists"
                  
                  # Test if build scripts exist
                  if grep -q '"compile"' "$pkg/package.json"; then
                    echo "  - compile script exists"
                  fi
                  
                  if grep -q '"bundle"' "$pkg/package.json"; then
                    echo "  - bundle script exists"
                  fi
                fi
              fi
            fi
          done

          echo "NPM publishing logic test completed"

  test-extension-publishing:
    if: inputs.test-type == 'extension-publishing'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Test Extension Publishing Logic
        run: |
          echo "Testing extension publishing logic..."

          # Test extension detection
          for pkg in packages/*/; do
            PKG_NAME=$(basename "$pkg")
            if [ -f "$pkg/package.json" ]; then
              if grep -q '"publisher"' "$pkg/package.json"; then
                echo "✅ Extension: $PKG_NAME"
                
                # Test package.json structure
                PUBLISHER=$(node -p "require('./$pkg/package.json').publisher")
                VERSION=$(node -p "require('./$pkg/package.json').version")
                echo "  - Publisher: $PUBLISHER"
                echo "  - Version: $VERSION"
                
                # Test if it's desktop or web extension
                if [ "$PKG_NAME" = "apex-lsp-vscode-extension" ]; then
                  echo "  - Type: Desktop extension (VSCode Marketplace)"
                elif [ "$PKG_NAME" = "apex-lsp-vscode-extension-web" ]; then
                  echo "  - Type: Web extension (OpenVSX Registry)"
                fi
              fi
            fi
          done

          echo "Extension publishing logic test completed"
