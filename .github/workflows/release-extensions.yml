name: Release VS Code Extensions

on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch to release from'
        required: false
        default: 'main'
        type: string
      extensions:
        description: 'Extensions to release'
        required: false
        default: 'apex-lsp-vscode-extension'
        type: string
      registries:
        description: 'Registries to publish to (all, vsce, ovsx)'
        required: false
        default: 'all'
        type: string
      available-extensions:
        description: 'Available VS Code extensions'
        required: false
        type: string
      dry-run:
        description: 'Run in dry-run mode (no actual publishing)'
        required: false
        default: 'false'
        type: string
      pre-release:
        description: 'Publish as pre-release version'
        required: false
        default: 'false'
        type: string

      version-bump:
        description: 'Version bump type (auto, patch, minor, major)'
        required: false
        default: 'auto'
        type: string
  workflow_dispatch:
    inputs:
      extensions:
        description: 'Extensions to release'
        required: false
        default: 'apex-lsp-vscode-extension'
        type: choice
        options:
          - all
          - apex-lsp-vscode-extension
          - apex-lsp-vscode-extension-web
      registries:
        description: 'Registries to publish to'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - vsce
          - ovsx
      dry-run:
        description: 'Run in dry-run mode (no actual publishing)'
        required: false
        default: 'false'
        type: string
      pre-release:
        description: 'Publish as pre-release version'
        required: false
        default: 'false'
        type: string

# Add explicit permissions for security
permissions:
  contents: write # Needed for version bumps and releases
  packages: write # Needed for publishing to registries
  actions: read

jobs:
  determine-build-type:
    runs-on: ubuntu-latest
    outputs:
      is-nightly: ${{ steps.check.outputs.is-nightly }}
      version-bump: ${{ steps.check.outputs.version-bump }}
      pre-release: ${{ steps.check.outputs.pre-release }}
      is-promotion: ${{ steps.check.outputs.is-promotion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        uses: ./.github/actions/npm-install-with-retries

      - name: Check build type
        id: check
        env:
          INPUT_VERSION_BUMP: ${{ inputs.version-bump || 'auto' }}
          INPUT_PRE_RELEASE: ${{ inputs.pre-release || 'false' }}
        run: |
          npx tsx .github/scripts/index.ts ext-build-type

  find-promotion-candidate:
    needs: determine-build-type
    runs-on: ubuntu-latest
    if: needs.determine-build-type.outputs.is-promotion == 'true'
    outputs:
      promotion-commit-sha: ${{ steps.find.outputs.commit-sha }}
      promotion-nightly-tag: ${{ steps.find.outputs.nightly-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        uses: ./.github/actions/npm-install-with-retries

      - name: Find nightly build to promote
        id: find
        run: |
          npx tsx .github/scripts/index.ts ext-promotion-finder

      - name: Set promotion commit SHA
        run: |
          echo "PROMOTION_COMMIT_SHA=${{ steps.find.outputs.commit-sha }}" >> $GITHUB_ENV

  determine-changes:
    needs: [determine-build-type]
    runs-on: ubuntu-latest
    outputs:
      selected-extensions: ${{ steps.changes.outputs.selected-extensions }}
      version-bumps: ${{ steps.changes.outputs.version-bumps }}
      promotion-commit-sha: ${{ steps.changes.outputs.promotion-commit-sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        uses: ./.github/actions/npm-install-with-retries

      - name: Determine changes and version bumps
        id: changes
        env:
          IS_NIGHTLY: ${{ needs.determine-build-type.outputs.is-nightly }}
          VERSION_BUMP: ${{ needs.determine-build-type.outputs.version-bump }}
          PRE_RELEASE: ${{ needs.determine-build-type.outputs.pre-release }}
          IS_PROMOTION: ${{ needs.determine-build-type.outputs.is-promotion }}
          PROMOTION_COMMIT_SHA: ${{ env.PROMOTION_COMMIT_SHA || '' }}
          SELECTED_EXTENSIONS: ${{ inputs.extensions }}
        run: |
          npx tsx .github/scripts/index.ts ext-change-detector

  display-release-plan:
    needs: [determine-build-type, determine-changes]
    runs-on: ubuntu-latest
    if: needs.determine-changes.outputs.selected-extensions != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        uses: ./.github/actions/npm-install-with-retries

      - name: Display Extension Release Plan
        env:
          BRANCH: ${{ inputs.branch || github.ref_name }}
          BUILD_TYPE: ${{ github.event_name }}
          IS_NIGHTLY: ${{ needs.determine-build-type.outputs.is-nightly }}
          VERSION_BUMP: ${{ needs.determine-build-type.outputs.version-bump }}
          REGISTRIES: ${{ inputs.registries }}
          PRE_RELEASE: ${{ needs.determine-build-type.outputs.pre-release }}
          SELECTED_EXTENSIONS: ${{ needs.determine-changes.outputs.selected-extensions }}
        run: |
          npx tsx .github/scripts/index.ts ext-release-plan

  bump-versions:
    needs: [determine-build-type, determine-changes]
    runs-on: ubuntu-latest
    if: needs.determine-changes.outputs.selected-extensions != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.IDEE_GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        uses: ./.github/actions/npm-install-with-retries

      - name: Bump versions and tag for selected extensions
        env:
          VERSION_BUMP: ${{ needs.determine-changes.outputs.version-bumps }}
          SELECTED_EXTENSIONS: ${{ needs.determine-changes.outputs.selected-extensions }}
          PRE_RELEASE: ${{ inputs.pre-release || github.event.inputs.pre-release || 'false' }}
          IS_NIGHTLY: ${{ needs.determine-build-type.outputs.is-nightly }}
          IS_PROMOTION: ${{ needs.determine-build-type.outputs.is-promotion }}
          PROMOTION_COMMIT_SHA: ${{ needs.determine-changes.outputs.promotion-commit-sha }}
        run: |
          npx tsx .github/scripts/index.ts ext-version-bumper

      - name: Validate GitHub authentication
        env:
          GITHUB_TOKEN: ${{ secrets.IDEE_GH_TOKEN }}
        run: |
          # Validate that required tokens are present
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "‚ùå Error: GITHUB_TOKEN is not set"
            exit 1
          fi

          # Test GitHub CLI authentication
          if ! gh auth status >/dev/null 2>&1; then
            echo "‚ùå Error: GitHub CLI authentication failed"
            exit 1
          fi

          echo "‚úÖ GitHub authentication validated"

      - name: Commit version bumps with tags
        env:
          # Ensure GitHub CLI has proper authentication
          GITHUB_TOKEN: ${{ secrets.IDEE_GH_TOKEN }}
          DRY_RUN: ${{ inputs.dry-run || github.event.inputs.dry-run || 'false' }}
        run: |
          IS_PROMOTION="${{ needs.determine-build-type.outputs.is-promotion }}"
          PROMOTION_COMMIT_SHA="${{ needs.determine-changes.outputs.promotion-commit-sha }}"

          if [ "$IS_PROMOTION" = "true" ] && [ -n "$PROMOTION_COMMIT_SHA" ]; then
            if [ "$DRY_RUN" = "true" ]; then
              echo "üîÑ PROMOTION DRY RUN: Would push tags created by version bumper script"
              echo "‚úÖ DRY RUN: Promotion tags would be pushed"
            else
              echo "üîÑ PROMOTION: Tags already created by version bumper script"
              echo "‚úÖ Promotion tags are ready for pushing"
            fi
          else
            if [ "$DRY_RUN" = "true" ]; then
              echo "üîÑ REGULAR DRY RUN: Would commit and push version bumps..."
              
              # Show what would be committed
              echo "üìã DRY RUN: Changes that would be committed:"
              git status --porcelain
              
              # Show what tags would be pushed
              echo "üìã DRY RUN: Tags that would be pushed:"
              git tag --list | tail -10 || echo "No tags found"
              
              echo "‚úÖ DRY RUN: Would commit version bumps and push tags"
            else
              echo "üîÑ REGULAR: Committing version bumps..."
              
              # Configure git for the action
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              
              # Configure git to use the PAT for authentication
              git remote set-url origin https://x-access-token:${{ secrets.IDEE_GH_TOKEN }}@github.com/${{ github.repository }}.git
              
              # Add all changes (including version bumps and tags)
              git add .
              
              # Create commit with version bump message
              git commit -m "chore: bump versions for release [skip ci]"

              # Push version bumps and tags - fail if branch protection blocks it
              echo "Pushing version bumps and tags to ${{ inputs.branch || github.ref_name }}..."
              if ! git push origin HEAD:${{ inputs.branch || github.ref_name }}; then
                echo "‚ùå Error: Direct push failed. This may be due to branch protection rules."
                echo "The workflow requires direct push access to ${{ inputs.branch || github.ref_name }}"
                echo "Please ensure the workflow has proper permissions or run manually."
                exit 1
              fi
              
              # Push all tags
              echo "Pushing tags..."
              git push origin --tags
              
              echo "‚úÖ Version bumps and tags pushed successfully"
            fi
          fi

  calculate-artifact-name:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.calc.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Calculate artifact name
        id: calc
        uses: ./.github/actions/calculate-artifact-name
        with:
          artifact-name: vsix-packages
          dry-run: ${{ inputs.dry-run || github.event.inputs.dry-run || 'false' }}

  package:
    needs: [bump-versions, calculate-artifact-name, determine-changes]
    uses: ./.github/workflows/package.yml
    with:
      branch: ${{ inputs.branch || github.ref_name }}
      artifact-name: ${{ needs.calculate-artifact-name.outputs.artifact-name }}
      dry-run: ${{ inputs.dry-run || github.event.inputs.dry-run || 'false' }}
      pre-release: ${{ inputs.pre-release || github.event.inputs.pre-release || 'false' }}

  determine-publish-matrix:
    needs: [determine-changes, calculate-artifact-name]
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        uses: ./.github/actions/npm-install-with-retries

      - name: Determine publish matrix
        id: matrix
        env:
          REGISTRIES: ${{ inputs.registries }}
          SELECTED_EXTENSIONS: ${{ needs.determine-changes.outputs.selected-extensions }}
        run: |
          npx tsx .github/scripts/index.ts ext-publish-matrix

  publish:
    needs:
      [
        bump-versions,
        package,
        calculate-artifact-name,
        determine-publish-matrix,
      ]
    runs-on: ubuntu-latest
    if: needs.determine-publish-matrix.outputs.matrix != '[]'
    strategy:
      matrix:
        include: ${{ fromJson(needs.determine-publish-matrix.outputs.matrix) }}
    steps:
      - name: Audit release attempt
        shell: bash
        run: |
          # Create audit log entry for release attempt
          AUDIT_LOG="/tmp/release_audit.log"
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          ACTOR="${{ github.actor }}"
          REPO="${{ github.repository }}"
          RUN_ID="${{ github.run_id }}"
          WORKFLOW="${{ github.workflow }}"
          BRANCH="${{ inputs.branch || github.ref_name }}"

          # Log audit information
          echo "[$TIMESTAMP] RELEASE_ATTEMPT: actor=$ACTOR, repo=$REPO, run_id=$RUN_ID, workflow=$WORKFLOW, branch=$BRANCH, registry=${{ matrix.registry }}, marketplace=${{ matrix.marketplace }}, dry_run=${{ inputs.dry-run || github.event.inputs.dry-run || 'false' }}" >> "$AUDIT_LOG"

          # Also log to GitHub Actions output for visibility
          echo "üîç AUDIT: Release attempt logged - $TIMESTAMP"
          echo "  Actor: $ACTOR"
          echo "  Repository: $REPO"
          echo "  Run ID: $RUN_ID"
          echo "  Workflow: $WORKFLOW"
          echo "  Branch: $BRANCH"
          echo "  Registry: ${{ matrix.registry }}"
          echo "  Marketplace: ${{ matrix.marketplace }}"
          echo "  Dry-run: ${{ inputs.dry-run || github.event.inputs.dry-run || 'false' }}"

      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.IDEE_GH_TOKEN }}
          ref: ${{ inputs.branch || github.ref }}

      - name: Download VSIX artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.calculate-artifact-name.outputs.artifact-name }}
          path: ./vsix-artifacts

      - name: List downloaded artifacts
        run: |
          echo "=== DEBUG: Downloaded Artifacts ==="
          echo "Artifact name: ${{ needs.calculate-artifact-name.outputs.artifact-name }}"
          echo "Download path: ./vsix-artifacts"
          echo ""

          if [ -d "./vsix-artifacts" ]; then
            echo "Directory exists. Contents:"
            ls -la ./vsix-artifacts/
            echo ""
            
            echo "VSIX files found:"
            find ./vsix-artifacts -name "*.vsix" -exec ls -la {} \;
            echo ""
            
            echo "Total VSIX files: $(find ./vsix-artifacts -name "*.vsix" | wc -l)"
          else
            echo "‚ùå Directory ./vsix-artifacts does not exist!"
          fi
          echo "=== END DEBUG ==="

      - name: Find VSIX file for publishing
        id: find_vsix
        run: |
          ARTIFACTS_DIR="./vsix-artifacts"
          VSIX_PATTERN="${{ matrix.vsix_pattern }}"
          VSIX_FILE=$(find "$ARTIFACTS_DIR" -name "$VSIX_PATTERN" | head -1)

          if [ -z "$VSIX_FILE" ]; then
            echo "‚ùå No VSIX file found matching pattern: $VSIX_PATTERN"
            echo "Searching in: $ARTIFACTS_DIR"
            echo "Available files:"
            find "$ARTIFACTS_DIR" -name "*.vsix" -exec ls -la {} \;
            exit 1
          fi

          echo "vsix_file=$VSIX_FILE" >> $GITHUB_OUTPUT
          echo "Found VSIX file: $VSIX_FILE"

      - name: Publish to ${{ matrix.marketplace }}
        uses: ./.github/actions/publish-vsix
        env:
          # Pass tokens as environment variables for better security
          VSCE_PERSONAL_ACCESS_TOKEN: ${{ matrix.registry == 'vsce' && secrets.VSCE_PERSONAL_ACCESS_TOKEN || '' }}
          OVSX_PAT: ${{ matrix.registry == 'ovsx' && secrets.IDEE_OVSX_PAT || '' }}
        with:
          vsix-path: ${{ steps.find_vsix.outputs.vsix_file }}
          publish-tool: ${{ matrix.registry }}
          pre-release: ${{ inputs.pre-release || github.event.inputs.pre-release || 'false' }}
          dry-run: ${{ inputs.dry-run || github.event.inputs.dry-run || 'false' }}

      - name: Audit release result
        shell: bash
        if: inputs.dry-run != 'true' && github.event.inputs.dry-run != 'true'
        run: |
          # Log the result of the release attempt
          AUDIT_LOG="/tmp/release_audit.log"
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          ACTOR="${{ github.actor }}"
          REPO="${{ github.repository }}"
          RUN_ID="${{ github.run_id }}"
          BRANCH="${{ inputs.branch || github.ref_name }}"

          if [ $? -eq 0 ]; then
            echo "[$TIMESTAMP] RELEASE_SUCCESS: actor=$ACTOR, repo=$REPO, run_id=$RUN_ID, branch=$BRANCH, registry=${{ matrix.registry }}, marketplace=${{ matrix.marketplace }}" >> "$AUDIT_LOG"
            echo "‚úÖ AUDIT: Release successful - $TIMESTAMP"
          else
            echo "[$TIMESTAMP] RELEASE_FAILURE: actor=$ACTOR, repo=$REPO, run_id=$RUN_ID, branch=$BRANCH, registry=${{ matrix.registry }}, marketplace=${{ matrix.marketplace }}" >> "$AUDIT_LOG"
            echo "‚ùå AUDIT: Release failed - $TIMESTAMP"
          fi

  slack-notify:
    name: Slack Notification
    needs:
      [determine-build-type, determine-changes, bump-versions, package, publish]
    runs-on: ubuntu-latest
    if: always() && needs.publish.result == 'success' && (inputs.dry-run != 'true' && github.event.inputs.dry-run != 'true')
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Get Extension Details
        id: extension-details
        run: |
          # Get selected extensions and their details
          SELECTED_EXTENSIONS="${{ needs.determine-changes.outputs.selected-extensions }}"
          VERSION_BUMP="${{ needs.determine-build-type.outputs.version-bump }}"
          PRE_RELEASE="${{ needs.determine-build-type.outputs.pre-release }}"

          # Initialize arrays for extension details
          EXTENSION_NAMES=""
          EXTENSION_VERSIONS=""
          EXTENSION_DISPLAY_NAMES=""

          IFS=',' read -ra EXTENSIONS <<< "$SELECTED_EXTENSIONS"
          for ext in "${EXTENSIONS[@]}"; do
            if [ -n "$ext" ] && [ -f "packages/$ext/package.json" ]; then
              # Get package details
              PACKAGE_NAME=$(node -p "require('./packages/$ext/package.json').name")
              PACKAGE_VERSION=$(node -p "require('./packages/$ext/package.json').version")
              DISPLAY_NAME=$(node -p "require('./packages/$ext/package.json').displayName || require('./packages/$ext/package.json').name")
              
              # Add to arrays
              if [ -z "$EXTENSION_NAMES" ]; then
                EXTENSION_NAMES="$PACKAGE_NAME"
                EXTENSION_VERSIONS="$PACKAGE_VERSION"
                EXTENSION_DISPLAY_NAMES="$DISPLAY_NAME"
              else
                EXTENSION_NAMES="$EXTENSION_NAMES, $PACKAGE_NAME"
                EXTENSION_VERSIONS="$EXTENSION_VERSIONS, $PACKAGE_VERSION"
                EXTENSION_DISPLAY_NAMES="$EXTENSION_DISPLAY_NAMES, $DISPLAY_NAME"
              fi
            fi
          done

          echo "extension_names=$EXTENSION_NAMES" >> $GITHUB_OUTPUT
          echo "extension_versions=$EXTENSION_VERSIONS" >> $GITHUB_OUTPUT
          echo "extension_display_names=$EXTENSION_DISPLAY_NAMES" >> $GITHUB_OUTPUT
          echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
          echo "pre_release=$PRE_RELEASE" >> $GITHUB_OUTPUT

      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.22.0
        with:
          payload: |
            {
              "text": "üéâ Apex Language Support Extensions Released Successfully!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üéâ Apex Language Support Extensions Released Successfully!"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${{ inputs.branch || github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Extensions:*\n${{ steps.extension-details.outputs.extension_display_names }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Versions:*\n${{ steps.extension-details.outputs.extension_versions }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Release Type:*\n${{ steps.extension-details.outputs.pre_release == 'true' && 'Pre-release' || 'Stable' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Version Bump:*\n${{ steps.extension-details.outputs.version_bump }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Workflow Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.IDEE_MAIN_SLACK_WEBHOOK }}

  slack-notify-failure:
    name: Slack Failure Notification
    needs:
      [determine-build-type, determine-changes, bump-versions, package, publish]
    runs-on: ubuntu-latest
    if: always() && needs.publish.result == 'failure' && (inputs.dry-run != 'true' && github.event.inputs.dry-run != 'true')
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Get Extension Details
        id: extension-details
        run: |
          # Get selected extensions and their details
          SELECTED_EXTENSIONS="${{ needs.determine-changes.outputs.selected-extensions }}"
          VERSION_BUMP="${{ needs.determine-build-type.outputs.version-bump }}"
          PRE_RELEASE="${{ needs.determine-build-type.outputs.pre-release }}"

          # Initialize arrays for extension details
          EXTENSION_NAMES=""
          EXTENSION_VERSIONS=""
          EXTENSION_DISPLAY_NAMES=""

          IFS=',' read -ra EXTENSIONS <<< "$SELECTED_EXTENSIONS"
          for ext in "${EXTENSIONS[@]}"; do
            if [ -n "$ext" ] && [ -f "packages/$ext/package.json" ]; then
              # Get package details
              PACKAGE_NAME=$(node -p "require('./packages/$ext/package.json').name")
              PACKAGE_VERSION=$(node -p "require('./packages/$ext/package.json').version")
              DISPLAY_NAME=$(node -p "require('./packages/$ext/package.json').displayName || require('./packages/$ext/package.json').name")
              
              # Add to arrays
              if [ -z "$EXTENSION_NAMES" ]; then
                EXTENSION_NAMES="$PACKAGE_NAME"
                EXTENSION_VERSIONS="$PACKAGE_VERSION"
                EXTENSION_DISPLAY_NAMES="$DISPLAY_NAME"
              else
                EXTENSION_NAMES="$EXTENSION_NAMES, $PACKAGE_NAME"
                EXTENSION_VERSIONS="$EXTENSION_VERSIONS, $PACKAGE_VERSION"
                EXTENSION_DISPLAY_NAMES="$EXTENSION_DISPLAY_NAMES, $DISPLAY_NAME"
              fi
            fi
          done

          echo "extension_names=$EXTENSION_NAMES" >> $GITHUB_OUTPUT
          echo "extension_versions=$EXTENSION_VERSIONS" >> $GITHUB_OUTPUT
          echo "extension_display_names=$EXTENSION_DISPLAY_NAMES" >> $GITHUB_OUTPUT
          echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
          echo "pre_release=$PRE_RELEASE" >> $GITHUB_OUTPUT

      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.22.0
        with:
          payload: |
            {
              "text": "‚ùå VS Code Extension Release Failed!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "‚ùå VS Code Extension Release Failed!"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${{ inputs.branch || github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Extensions:*\n${{ steps.extension-details.outputs.extension_display_names }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Versions:*\n${{ steps.extension-details.outputs.extension_versions }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Release Type:*\n${{ steps.extension-details.outputs.pre_release == 'true' && 'Pre-release' || 'Stable' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Version Bump:*\n${{ steps.extension-details.outputs.version_bump }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Workflow Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Please check the workflow logs for detailed error information."
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.IDEE_MAIN_SLACK_WEBHOOK }}
