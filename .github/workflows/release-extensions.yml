name: Release VS Code Extensions

on:
  push:
    branches: [main]
  workflow_call:
    inputs:
      branch:
        description: 'Branch to release from'
        required: false
        default: 'main'
        type: string
      extensions:
        description: 'Extensions to release'
        required: false
        default: 'apex-lsp-vscode-extension'
        type: string
      registry:
        description: 'Registry to publish to'
        required: false
        default: 'all'
        type: string
      available-extensions:
        description: 'Available VS Code extensions'
        required: false
        type: string
      dry-run:
        description: 'Run in dry-run mode (no actual publishing)'
        required: false
        default: false
        type: boolean
      pre-release:
        description: 'Publish as pre-release version'
        required: false
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      extensions:
        description: 'Extensions to release'
        required: false
        default: 'apex-lsp-vscode-extension'
        type: choice
        options:
          - all
          - apex-lsp-vscode-extension
          - apex-lsp-vscode-extension-web
      registry:
        description: 'Registry to publish to'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - vscode
          - openvsx
      dry-run:
        description: 'Run in dry-run mode (no actual publishing)'
        required: false
        default: false
        type: boolean
      pre-release:
        description: 'Publish as pre-release version'
        required: false
        default: false
        type: boolean

jobs:
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-extensions: ${{ steps.changes.outputs.extensions }}
      selected-extensions: ${{ steps.selected.outputs.extensions }}
      version-bumps: ${{ steps.version.outputs.bumps }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch || github.ref }}

      - name: Determine changed extensions
        id: changes
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"

          # Determine which VS Code extensions have changes
          CHANGED_EXTENSIONS=""
          for pkg in packages/*/; do
            PKG_NAME=$(basename "$pkg")
            if [ -f "$pkg/package.json" ]; then
              # Check if it's a VS Code extension
              if grep -q '"publisher"' "$pkg/package.json"; then
                if echo "$CHANGED_FILES" | grep -q "^packages/$PKG_NAME/"; then
                  CHANGED_EXTENSIONS="$CHANGED_EXTENSIONS,$PKG_NAME"
                fi
              fi
            fi
          done

          # Remove leading comma
          CHANGED_EXTENSIONS=${CHANGED_EXTENSIONS#,}
          echo "extensions=$CHANGED_EXTENSIONS" >> $GITHUB_OUTPUT

      - name: Determine selected extensions
        id: selected
        run: |
          # Handle both workflow_call (string) and workflow_dispatch (choice) inputs
          SELECTED_EXTENSION="${{ github.event.inputs.extensions || inputs.extensions }}"
          AVAILABLE_EXTENSIONS="${{ inputs.available-extensions }}"

          if [ "$SELECTED_EXTENSION" = "none" ]; then
            # No extensions selected
            SELECTED_EXTENSIONS=""
          elif [ "$SELECTED_EXTENSION" = "all" ]; then
            # Use all available extensions
            if [ -n "$AVAILABLE_EXTENSIONS" ]; then
              SELECTED_EXTENSIONS="$AVAILABLE_EXTENSIONS"
            else
              # Fallback to changed extensions detection
              SELECTED_EXTENSIONS="${{ steps.changes.outputs.extensions }}"
            fi
          elif [ "$SELECTED_EXTENSION" = "changed" ]; then
            # Use changed extensions
            SELECTED_EXTENSIONS="${{ steps.changes.outputs.extensions }}"
          else
            # Use the specific selected extension
            SELECTED_EXTENSIONS="$SELECTED_EXTENSION"
          fi

          echo "extensions=$SELECTED_EXTENSIONS" >> $GITHUB_OUTPUT

      - name: Determine version bumps
        id: version
        run: |
          # Get commit messages since last release
          COMMIT_MESSAGES=$(git log --oneline HEAD~10..HEAD)
          echo "Recent commits: $COMMIT_MESSAGES"

          # Determine version bump type based on commit messages
          # Major: breaking changes
          # Minor: new features
          # Patch: bug fixes
          VERSION_BUMP="patch"  # default

          if echo "$COMMIT_MESSAGES" | grep -qi "breaking\|major"; then
            VERSION_BUMP="major"
          elif echo "$COMMIT_MESSAGES" | grep -qi "feat\|feature\|minor"; then
            VERSION_BUMP="minor"
          fi

          echo "bumps=$VERSION_BUMP" >> $GITHUB_OUTPUT

  display-release-plan:
    needs: determine-changes
    runs-on: ubuntu-latest
    if: (inputs.dry-run == 'true' || github.event.inputs.dry-run == 'true') && needs.determine-changes.outputs.selected-extensions != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Display Extension Release Plan
        run: |
          echo "=== EXTENSION RELEASE PLAN ==="
          echo "Branch: ${{ inputs.branch || github.ref_name }}"
          echo "Version bump type: ${{ needs.determine-changes.outputs.version-bumps }}"
          echo "Registry: ${{ inputs.registry }}"
          echo "Pre-release: ${{ inputs.pre-release || github.event.inputs.pre-release || false }}"
          echo "Dry run mode: ENABLED"
          echo ""

          # Determine which extensions to release
          EXTENSIONS_TO_RELEASE="${{ needs.determine-changes.outputs.selected-extensions }}"
          echo "Extensions to release: $EXTENSIONS_TO_RELEASE"
          echo ""

          # Show what would happen for each extension
          IFS=',' read -ra EXT_ARRAY <<< "$EXTENSIONS_TO_RELEASE"
          for ext in "${EXT_ARRAY[@]}"; do
            if [ -n "$ext" ] && [ -d "packages/$ext" ]; then
              echo "Extension: $ext"
              
              # Get current version and publisher
              CURRENT_VERSION=$(node -p "require('./packages/$ext/package.json').version")
              PUBLISHER=$(node -p "require('./packages/$ext/package.json').publisher")
              echo "  Current version: $CURRENT_VERSION"
              echo "  Publisher: $PUBLISHER"
              
              # Calculate new version
              IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
              MAJOR="${VERSION_PARTS[0]}"
              MINOR="${VERSION_PARTS[1]}"
              PATCH="${VERSION_PARTS[2]}"
              
              case "${{ needs.determine-changes.outputs.version-bumps }}" in
                "major")
                  NEW_VERSION="$((MAJOR + 1)).0.0"
                  ;;
                "minor")
                  NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                  ;;
                "patch")
                  NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                  ;;
              esac
              
              echo "  Would bump to: $NEW_VERSION"
              
              # Determine registries
              IFS=',' read -ra REG_ARRAY <<< "${{ inputs.registry }}"
              for registry in "${REG_ARRAY[@]}"; do
                case "$registry" in
                  "vscode"|"all")
                    if [ "$ext" = "apex-lsp-vscode-extension" ]; then
                      PRE_RELEASE_TEXT=""
                      if [ "${{ inputs.pre-release || github.event.inputs.pre-release || false }}" = "true" ]; then
                        PRE_RELEASE_TEXT=" (pre-release)"
                      fi
                      echo "  Would publish to: VSCode Marketplace$PRE_RELEASE_TEXT"
                    fi
                    ;;
                  "openvsx"|"all")
                    if [ "$ext" = "apex-lsp-vscode-extension-web" ]; then
                      PRE_RELEASE_TEXT=""
                      if [ "${{ inputs.pre-release || github.event.inputs.pre-release || false }}" = "true" ]; then
                        PRE_RELEASE_TEXT=" (pre-release)"
                      fi
                      echo "  Would publish to: OpenVSX Registry$PRE_RELEASE_TEXT"
                    fi
                    ;;
                esac
              done
              echo ""
            fi
          done

          echo "âœ… Extension release dry run completed"

  package:
    needs: determine-changes
    if: inputs.dry-run != 'true' && github.event.inputs.dry-run != 'true'
    uses: ./.github/workflows/package.yml
    with:
      branch: ${{ inputs.branch || github.ref_name }}
      artifact-name: vsix-packages

  bump-versions:
    needs: [determine-changes, package]
    runs-on: ubuntu-latest
    if: (inputs.dry-run != 'true' && github.event.inputs.dry-run != 'true') && needs.determine-changes.outputs.selected-extensions != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Bump versions for selected extensions
        run: |
          VERSION_BUMP="${{ needs.determine-changes.outputs.version-bumps }}"
          SELECTED_EXTENSIONS="${{ needs.determine-changes.outputs.selected-extensions }}"

          echo "Version bump type: $VERSION_BUMP"
          echo "Selected extensions: $SELECTED_EXTENSIONS"

          # Convert comma-separated list to array
          IFS=',' read -ra EXTENSIONS <<< "$SELECTED_EXTENSIONS"

          for pkg in "${EXTENSIONS[@]}"; do
            if [ -n "$pkg" ] && [ -f "packages/$pkg/package.json" ]; then
              echo "Bumping version for $pkg..."
              
              # Get current version
              CURRENT_VERSION=$(node -p "require('./packages/$pkg/package.json').version")
              echo "Current version: $CURRENT_VERSION"
              
              # Bump version
              cd packages/$pkg
              npm version $VERSION_BUMP --no-git-tag-version
              NEW_VERSION=$(node -p "require('./package.json').version")
              echo "New version: $NEW_VERSION"
              cd ../..
              
              # Update package-lock.json if it exists
              if [ -f "package-lock.json" ]; then
                npm install
              fi
            fi
          done

      - name: Commit version bumps
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: bump versions for release [skip ci]" || echo "No changes to commit"
          git push

  publish-vscode:
    needs: [bump-versions, package]
    if: (inputs.dry-run != 'true' && github.event.inputs.dry-run != 'true') && (inputs.registry == 'all' || inputs.registry == 'vscode')
    uses: ./.github/workflows/publishVSCode.yml
    with:
      branch: ${{ inputs.branch || github.ref_name }}
      pre-release: ${{ inputs.pre-release || github.event.inputs.pre-release || false }}
    secrets: inherit

  publish-openvsx:
    needs: [bump-versions, package]
    if: (inputs.dry-run != 'true' && github.event.inputs.dry-run != 'true') && (inputs.registry == 'all' || inputs.registry == 'openvsx')
    uses: ./.github/workflows/publishOpenVSX.yml
    with:
      branch: ${{ inputs.branch || github.ref_name }}
      pre-release: ${{ inputs.pre-release || github.event.inputs.pre-release || false }}
    secrets: inherit
